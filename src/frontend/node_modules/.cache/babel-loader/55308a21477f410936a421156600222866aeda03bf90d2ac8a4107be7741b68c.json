{"ast":null,"code":"var _jsxFileName = \"/home/user/growtoimpress/src/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\n// src/pages/Chatbot.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Hello! How can I assist you today?'\n  } // Initial welcome message\n  ]);\n  const [userInput, setUserInput] = useState('');\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = () => {\n    if (userInput.trim()) {\n      const newMessages = [...messages, {\n        sender: 'user',\n        text: userInput\n      }];\n      setMessages(newMessages);\n      setUserInput('');\n\n      // Send userInput to backend\n      fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: userInput\n        })\n      }).then(response => response.json()).then(data => {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: data.response\n        }]);\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-canvas\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: [msg.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"Gemini_Generated_Image_6opy9e6opy9e6opy.jpg\" /* Replace with the actual path to the bot avatar */,\n            className: \"avatar\",\n            alt: \"Bot Avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-area\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"typing-input\",\n            value: userInput,\n            onChange: handleInputChange,\n            placeholder: \"Type a message...\",\n            onKeyPress: e => e.key === 'Enter' && handleSend()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"send-message-button\",\n            onClick: handleSend,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"ziDYTFz3g6CGPXYlFo8FZ2FK7+0=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","userInput","setUserInput","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","e","target","value","handleSend","trim","newMessages","fetch","method","headers","body","JSON","stringify","message","then","response","json","data","prevMessages","catch","error","console","children","Navbar","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","src","alt","ref","type","onChange","placeholder","onKeyPress","key","id","onClick","_c","$RefreshReg$"],"sources":["/home/user/growtoimpress/src/frontend/src/components/Chatbot.js"],"sourcesContent":["// src/pages/Chatbot.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([\n    { sender: 'bot', text: 'Hello! How can I assist you today?' } // Initial welcome message\n  ]);\n  const [userInput, setUserInput] = useState('');\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSend = () => {\n    if (userInput.trim()) {\n      const newMessages = [...messages, { sender: 'user', text: userInput }];\n      setMessages(newMessages);\n      setUserInput('');\n\n      // Send userInput to backend\n      fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: userInput }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          setMessages((prevMessages) => [\n            ...prevMessages,\n            { sender: 'bot', text: data.response },\n          ]);\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }\n  };\n\n  return (\n    <div>\n      <Navbar /> {/* Add the Navbar component here */}\n      <div className=\"chat-canvas\">\n        <div className=\"chat-body\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' && (\n                <img\n                  src= \"Gemini_Generated_Image_6opy9e6opy9e6opy.jpg\" /* Replace with the actual path to the bot avatar */\n                  className=\"avatar\"\n                  alt=\"Bot Avatar\"\n                />\n              )}\n              <div className=\"message-content\">{msg.text}</div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"typing-area\">\n          <div className=\"typing-form\">\n            <input\n              type=\"text\"\n              className=\"typing-input\"\n              value={userInput}\n              onChange={handleInputChange}\n              placeholder=\"Type a message...\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n            />\n            <button id=\"send-message-button\" onClick={handleSend}>\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CACvC;IAAES,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAqC,CAAC,CAAC;EAAA,CAC/D,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMa,cAAc,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IAAA,IAAAa,qBAAA;IACd,CAAAA,qBAAA,GAAAD,cAAc,CAACE,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAACV,QAAQ,CAAC,CAAC;EAEd,MAAMW,iBAAiB,GAAIC,CAAC,IAAK;IAC/BP,YAAY,CAACO,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIX,SAAS,CAACY,IAAI,CAAC,CAAC,EAAE;MACpB,MAAMC,WAAW,GAAG,CAAC,GAAGjB,QAAQ,EAAE;QAAEE,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAEC;MAAU,CAAC,CAAC;MACtEH,WAAW,CAACgB,WAAW,CAAC;MACxBZ,YAAY,CAAC,EAAE,CAAC;;MAEhB;MACAa,KAAK,CAAC,UAAU,EAAE;QAChBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAEpB;QAAU,CAAC;MAC7C,CAAC,CAAC,CACCqB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACd3B,WAAW,CAAE4B,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;UAAE3B,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAEyB,IAAI,CAACF;QAAS,CAAC,CACvC,CAAC;MACJ,CAAC,CAAC,CACDI,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC,CAAC,CAAC;IACN;EACF,CAAC;EAED,oBACElC,OAAA;IAAAoC,QAAA,gBACEpC,OAAA,CAACqC,MAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eACXzC,OAAA;MAAK0C,SAAS,EAAC,aAAa;MAAAN,QAAA,gBAC1BpC,OAAA;QAAK0C,SAAS,EAAC,WAAW;QAAAN,QAAA,GACvBjC,QAAQ,CAACwC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvB7C,OAAA;UAAiB0C,SAAS,EAAE,WAAWE,GAAG,CAACvC,MAAM,EAAG;UAAA+B,QAAA,GACjDQ,GAAG,CAACvC,MAAM,KAAK,KAAK,iBACnBL,OAAA;YACE8C,GAAG,EAAE,6CAA6C,CAAC;YACnDJ,SAAS,EAAC,QAAQ;YAClBK,GAAG,EAAC;UAAY;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjB,CACF,eACDzC,OAAA;YAAK0C,SAAS,EAAC,iBAAiB;YAAAN,QAAA,EAAEQ,GAAG,CAACtC;UAAI;YAAAgC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,GARzCI,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASV,CACN,CAAC,eACFzC,OAAA;UAAKgD,GAAG,EAAEvC;QAAe;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACNzC,OAAA;QAAK0C,SAAS,EAAC,aAAa;QAAAN,QAAA,eAC1BpC,OAAA;UAAK0C,SAAS,EAAC,aAAa;UAAAN,QAAA,gBAC1BpC,OAAA;YACEiD,IAAI,EAAC,MAAM;YACXP,SAAS,EAAC,cAAc;YACxBzB,KAAK,EAAEV,SAAU;YACjB2C,QAAQ,EAAEpC,iBAAkB;YAC5BqC,WAAW,EAAC,mBAAmB;YAC/BC,UAAU,EAAGrC,CAAC,IAAKA,CAAC,CAACsC,GAAG,KAAK,OAAO,IAAInC,UAAU,CAAC;UAAE;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtD,CAAC,eACFzC,OAAA;YAAQsD,EAAE,EAAC,qBAAqB;YAACC,OAAO,EAAErC,UAAW;YAAAkB,QAAA,EAAC;UAEtD;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACvC,EAAA,CA/EQD,OAAO;AAAAuD,EAAA,GAAPvD,OAAO;AAiFhB,eAAeA,OAAO;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}