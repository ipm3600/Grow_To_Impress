{"ast":null,"code":"var _jsxFileName = \"/home/user/growtoimpress/src/frontend/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\n// src/components/Chatbot.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const messagesEndRef = useRef(null);\n\n  // Scroll to the bottom whenever messages change\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleInputChange = e => {\n    setUserInput(e.target.value);\n  };\n  const handleSend = () => {\n    if (userInput.trim()) {\n      const newMessages = [...messages, {\n        sender: 'user',\n        text: userInput\n      }];\n      setMessages(newMessages);\n      setUserInput('');\n\n      // Send userInput to backend\n      fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: userInput\n        })\n      }).then(response => response.json()).then(data => {\n        setMessages(prevMessages => [...prevMessages, {\n          sender: 'bot',\n          text: data.response\n        }]);\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: handleInputChange,\n        placeholder: \"Type a message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"a9NavnWICb4yaDxbWN1at5FwvBg=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","userInput","setUserInput","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","e","target","value","handleSend","trim","newMessages","sender","text","fetch","method","headers","body","JSON","stringify","message","then","response","json","data","prevMessages","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","type","onChange","placeholder","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["/home/user/growtoimpress/src/frontend/src/components/Chatbot.js"],"sourcesContent":["// src/components/Chatbot.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Chatbot.css';\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n\n  const messagesEndRef = useRef(null);\n\n  // Scroll to the bottom whenever messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSend = () => {\n    if (userInput.trim()) {\n      const newMessages = [...messages, { sender: 'user', text: userInput }];\n      setMessages(newMessages);\n      setUserInput('');\n\n      // Send userInput to backend\n      fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: userInput }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          setMessages((prevMessages) => [\n            ...prevMessages,\n            { sender: 'bot', text: data.response },\n          ]);\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }\n  };\n\n  return (\n    <div className=\"chatbot-page\">\n      <header className=\"chat-header\">\n        <h2>Chatbot</h2>\n      </header>\n      <div className=\"chat-body\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.sender}`}>\n            <div className=\"message-content\">\n              {msg.text}\n            </div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={handleInputChange}\n          placeholder=\"Type a message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n        />\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}