{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{Link,useNavigate}from'react-router-dom';import'../styles/Chatbot.css';import api from'../axiosConfig';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Chatbot(){// State to hold messages between the user and the bot\nconst[messages,setMessages]=useState([{sender:'bot',text:'Hello! How can I assist you today?'}]);// State to hold the user's current input\nconst[userInput,setUserInput]=useState('');// State to handle dropdown visibility for logout\nconst[showDropdown,setShowDropdown]=useState(false);const navigate=useNavigate();const messagesEndRef=useRef(null);// Scroll to the latest message whenever messages update\nuseEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});},[messages]);// Updates user input as they type\nconst handleInputChange=e=>{setUserInput(e.target.value);};// Sends the user's message to the bot and handles the response\nconst handleSend=()=>{if(userInput.trim()){// Adds user's message to messages list\nconst newMessages=[...messages,{sender:'user',text:userInput}];setMessages(newMessages);setUserInput('');// Sends user's message to the backend\nfetch('/chatbot',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:userInput})}).then(response=>response.json()).then(data=>{// Adds bot's response to messages list\nsetMessages(prevMessages=>[...prevMessages,{sender:'bot',text:data.response}]);}).catch(error=>{console.error('Error:',error);});}};// Handles user logout\nconst handleLogout=async()=>{try{await api.get('/logout');// Requests logout from backend\nnavigate('/login');// Redirects to login page\n}catch(error){console.error('Logout failed:',error);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"header\",{className:\"navbar\",children:[/*#__PURE__*/_jsx(Link,{to:\"/home\",children:/*#__PURE__*/_jsx(\"img\",{src:\"grow_to_impress_logo.png\",alt:\"logo\",className:\"logo\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"navbar-links\",children:[/*#__PURE__*/_jsx(Link,{to:\"/how-to-section\",className:\"nav-link\",children:\"LEARN HOW TO\"}),/*#__PURE__*/_jsx(Link,{to:\"/chatbot\",className:\"nav-link active\",children:\"IXIA\"}),/*#__PURE__*/_jsx(Link,{to:\"/resources\",className:\"nav-link\",children:\"GUIDES\"}),/*#__PURE__*/_jsx(Link,{to:\"/stories\",className:\"nav-link\",children:\"STORIES OF INSPIRATION\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"three-dots-menu\",onClick:()=>setShowDropdown(!showDropdown),children:\"\\u22EE \"}),showDropdown&&/*#__PURE__*/_jsx(\"div\",{className:\"dropdown-menu\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"dropdown-link\",children:\"Logout\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-canvas\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-body\",children:[messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.sender}`,children:[msg.sender==='bot'&&/*#__PURE__*/_jsx(\"img\",{src:\"Gemini_Generated_Image_6opy9e6opy9e6opy.jpg\",className:\"avatar\",alt:\"Bot Avatar\"}),/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:msg.text})]},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef}),\" \"]}),/*#__PURE__*/_jsx(\"div\",{className:\"typing-area\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"typing-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"typing-input\",value:userInput,onChange:handleInputChange,placeholder:\"Type a message...\",onKeyPress:e=>e.key==='Enter'&&handleSend()}),/*#__PURE__*/_jsx(\"button\",{id:\"send-message-button\",onClick:handleSend,children:\"Send\"})]})})]})]});}export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","useNavigate","api","jsx","_jsx","jsxs","_jsxs","Chatbot","messages","setMessages","sender","text","userInput","setUserInput","showDropdown","setShowDropdown","navigate","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","e","target","value","handleSend","trim","newMessages","fetch","method","headers","body","JSON","stringify","message","then","response","json","data","prevMessages","catch","error","console","handleLogout","get","children","className","to","src","alt","onClick","map","msg","index","ref","type","onChange","placeholder","onKeyPress","key","id"],"sources":["/home/user/growtoimpress/src/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport '../styles/Chatbot.css';\nimport api from '../axiosConfig';\n\nfunction Chatbot() {\n  // State to hold messages between the user and the bot\n  const [messages, setMessages] = useState([\n    { sender: 'bot', text: 'Hello! How can I assist you today?' }\n  ]);\n  // State to hold the user's current input\n  const [userInput, setUserInput] = useState('');\n  // State to handle dropdown visibility for logout\n  const [showDropdown, setShowDropdown] = useState(false);\n  const navigate = useNavigate();\n  const messagesEndRef = useRef(null);\n\n  // Scroll to the latest message whenever messages update\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Updates user input as they type\n  const handleInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  // Sends the user's message to the bot and handles the response\n  const handleSend = () => {\n    if (userInput.trim()) {\n      // Adds user's message to messages list\n      const newMessages = [...messages, { sender: 'user', text: userInput }];\n      setMessages(newMessages);\n      setUserInput('');\n\n      // Sends user's message to the backend\n      fetch('/chatbot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: userInput }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          // Adds bot's response to messages list\n          setMessages((prevMessages) => [\n            ...prevMessages,\n            { sender: 'bot', text: data.response },\n          ]);\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }\n  };\n\n  // Handles user logout\n  const handleLogout = async () => {\n    try {\n      await api.get('/logout'); // Requests logout from backend\n      navigate('/login'); // Redirects to login page\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  return (\n    <div>\n      {/* Navbar with links to other pages */}\n      <header className=\"navbar\">\n        <Link to=\"/home\"><img src=\"grow_to_impress_logo.png\" alt=\"logo\" className=\"logo\" /></Link>\n        <div className=\"navbar-links\">\n          <Link to=\"/how-to-section\" className=\"nav-link\">LEARN HOW TO</Link>\n          <Link to=\"/chatbot\" className=\"nav-link active\">IXIA</Link>\n          <Link to=\"/resources\" className=\"nav-link\">GUIDES</Link>\n          <Link to=\"/stories\" className=\"nav-link\">STORIES OF INSPIRATION</Link>\n        </div>\n        {/* Three dots menu for logout */}\n        <div className=\"three-dots-menu\" onClick={() => setShowDropdown(!showDropdown)}>\n          &#x22EE; {/* Vertical ellipsis */}\n        </div>\n        {showDropdown && (\n          <div className=\"dropdown-menu\">\n            <button onClick={handleLogout} className=\"dropdown-link\">Logout</button>\n          </div>\n        )}\n      </header>\n\n      {/* Chat interface */}\n      <div className=\"chat-canvas\">\n        <div className=\"chat-body\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.sender}`}>\n              {msg.sender === 'bot' && (\n                <img\n                  src=\"Gemini_Generated_Image_6opy9e6opy9e6opy.jpg\"\n                  className=\"avatar\"\n                  alt=\"Bot Avatar\"\n                />\n              )}\n              <div className=\"message-content\">{msg.text}</div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} /> {/* Reference for scrolling to the latest message */}\n        </div>\n        <div className=\"typing-area\">\n          <div className=\"typing-form\">\n            {/* Input for user messages */}\n            <input\n              type=\"text\"\n              className=\"typing-input\"\n              value={userInput}\n              onChange={handleInputChange}\n              placeholder=\"Type a message...\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n            />\n            {/* Button to send message */}\n            <button id=\"send-message-button\" onClick={handleSend}>\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}